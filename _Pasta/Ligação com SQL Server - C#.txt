=================================================================================
Classe de Conexão

class Conexao
    {
        #region "Variáveis" 

        // =================================================================================
        // Variáveis da Conexão

        // Nome do servidor
        private static string _servidor = @"VPR0576613W10-1\SQLEXPRESS";

        // Nome do banco de dados
        private static string _baseDeDados = "escola";

        // Nome do Usuário
        private static string _usuario = "sa";

        // Senha do usuário
        private static string _senha = "123456";

        // Linha de Conexão SQL Server com Usuário e Senha
        private static string _strConexao = $"Data Source={_servidor};Initial Catalog={_baseDeDados};UserID={_usuario};Password={_senha}";

        // Linha de Conexão SQL Server sem Usuário e Senha
        // private static string _strConexao = $"Data Source={_servidor};Initial Catalog={_baseDeDados};Integrated Security=True";

        // =================================================================================
        // Variáveis das Querys

        public string query;
        public SqlConnection conexao = new SqlConnection(_strConexao);
        public SqlCommand comando;
        public SqlDataAdapter da;
        public SqlDataReader dr;
        public DataSet ds;

        #endregion

//=================================================================================

        #region "Métodos"

        // Abrir Conexão com o Banco de Dados
        public void AbreConexao()
        {
            // Ver se conexão já está aberta, e fechá-la caso sim
            if (conexao.State == ConnectionState.Open)
            {
                conexao.Close();
            }

            // Abrir conexão
            conexao.Open();
        }

        // Fechar Conexão com o Banco de Dados
        public void FechaConexao ()
        {
            // Ver se conexão está aberta, e fechá-la
            if (conexao.State == ConnectionState.Open)
            {
                conexao.Close();
            }
        }

        #endregion
    }

=================================================================================
Classe de Mexer na Tabela Alunos

class Aluno
    {
        #region "Variáveis"

        // Campos do Banco de Dados
        private int _id_aluno;
        private string _nome;
        private string _email;
        private string _fone;
        private string _foto;

        #endregion

        // =================================================================================

        #region "Propriedades"

        // Propriedades de cada coluna/variável do Banco de Dados
        public int Id_aluno
        {
            get { return _id_aluno; }
            set { _id_aluno = value; }
        }

        public string Nome 
        {
            get { return _nome;}
            set { _nome = value; }  
        }

        public string Email
        {
            get { return _email;}
            set { _email = value; }
        }

        public string Fone
        {
            get { return _foto;}
            set { _foto = value; }
        }

        public string Foto
        {
            get { return _foto;}
            set { _foto = value; }

        }

        #endregion

        // =================================================================================

        #region "Construtores"

        // Criar Construtores

        // Limpar as variáveis
        public Aluno() 
        {
            Id_aluno = 0;
            Nome = string.Empty;
            Email = string.Empty;
            Fone = string.Empty;
            Foto = string.Empty;
        }

        // Construtor para Inserir um Aluno
        public Aluno(string nome, string email, string fone, string foto) 
        {
            Nome = nome;
            Email = email;
            Fone = fone;
            Foto = foto;
        }

        // Construtor para Alterar um Aluno
        public Aluno(int id_aluno, string nome, string email, string fone)
        {
            Id_aluno = id_aluno;
            Nome = nome; 
            Email = email;
            Fone = fone;
        }

        // Construtor para Alterar a Foto de um Aluno
        public Aluno(int id_aluno, string foto)
        {
            Id_aluno = id_aluno;
            Foto = foto;
        }

        // Construtor para o DataGrid buscar um Aluno
        public Aluno(int id_aluno)
        {
            Id_aluno = id_aluno;
        }

        #endregion

        // =================================================================================

        #region "Métodos"

        // Método para Inserir um Aluno
        public void InsereAluno()
        {
            // Fazer a Conexão com o Banco de Dados, usando a classe Conexao já criada
            Conexao cn = new Conexao();

            // Tentar fazer a inserção
            try
            {
                cn.query = string.Format($"INSERT INTO tab_alunos(nome, email, fone, foto) VALUES ('{Nome}', '{Email}', '{Fone}', '{Foto}')");
                cn.comando = new SqlCommand(cn.query, cn.conexao);
                cn.AbreConexao();
                cn.comando.ExecuteNonQuery();

            }
            catch (Exception ERRO)
            {
                MessageBox.Show($"Ocorreu um erro:\n{ERRO.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                
            } 
            finally
            {
                cn.FechaConexao();
            }
        }

        // Método para Alterar um Aluno
        public void AlteraAluno()
        {
            Conexao cn = new Conexao();
            try
            {
                cn.query = string.Format($"UPDATE tab_alunos SET nome = '{Nome}', email = '{Email}', fone = '{Fone}' WHERE id_aluno = {Id_aluno}");
                cn.comando = new SqlCommand(cn.query, cn.conexao);
                cn.AbreConexao();
                cn.comando.ExecuteNonQuery();
            }
            catch (Exception ERRO)
            {
                MessageBox.Show($"Ocorreu um erro:\n{ERRO.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            finally
            {
                cn.FechaConexao();
            }
        }

        // Método para Alterar Foto de um Aluno
        public void AlteraFotoAluno()
        {
            Conexao cn = new Conexao();
            try
            {
                cn.query = string.Format($"UPDATE tab_alunos SET foto = '{Foto}' WHERE id_aluno = {Id_aluno}");
                cn.comando = new SqlCommand(cn.query, cn.conexao);
                cn.AbreConexao();
                cn.comando.ExecuteNonQuery();
            }
            catch (Exception ERRO)
            {
                MessageBox.Show($"Ocorreu um erro:\n{ERRO.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
            finally
            {
                cn.FechaConexao();
            }
        }

        // Método para mostrar todos os Alunos no DataGrid
        public static dynamic MostraAlunos()
        {
            Conexao cn = new Conexao();

            try
            {
                cn.query = "SELECT * FROM tab_alunos";
                cn.da = new SqlDataAdapter(cn.query, cn.conexao);
                cn.ds = new System.Data.DataSet();
                cn.da.Fill(cn.ds, "Alunos");
                return cn.ds.Tables["Alunos"];
            }
            catch (Exception ERRO)
            {
                MessageBox.Show($"Ocorreu um erro:\n{ERRO.Message}", "Erro", MessageBoxButtons.OK, MessageBoxIcon.Error);
                
            }
        }

        #endregion

        // =================================================================================
    }

=================================================================================
Fazer DataGridView receber o SELECT do Banco de Dados: 

private void frmAlunos_Load(object sender, EventArgs e)
{
   dgvAlunos.DataSource = Aluno.MostraAlunos();
}








































































