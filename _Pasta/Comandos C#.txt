C# no Visual Studio

Estrutura do Sistema
=================================================================================
using System;

class Programa
{
	static void Main(string[] args)
	{

		Console.WriteLine("Olá, Mundo!");

	}
}
=================================================================================

Console.WriteLine()	-> Escreve no console
Console.Write()     	-> Escreve no console sem pular linha
Console.ReadLine()  	-> Le algo
Console.ReadKey()	-> Recebe apenas um caracter, e já dá Enter
Console.Clear()		-> Limpa a tela
Console.CursorVisible()	-> Mudar as opções de visibilidade do cursor (true ou false)
Console.CursorVisible() = true;
Console.Beep()	     	-> Faz um som, recebendo dois parâmetros, frequência do som e a duração 

=================================================================================
Comentários
//
/* */
Ctrl + k + c

Ctrl + k + u -> Descomentar

=================================================================================
Atalhos Visual Studio
F5 -> Inicia o código
Ctrl + k + c -> Comenta
Ctrl + k + u -> Descomenta

=================================================================================
Tipos Primitivos
- int		(Números inteiros)
- double	(Números decimais)
- char		(Caracteres únicos)
- string	(Textos)
- bool		(Valores Booleanos)	true / false

Atribuir valor char com Console.ReadLine():
char letra; 
char.TryParse(Console.ReadLine(), out letra); 

=================================================================================
Pegar data atual:
string dataAtual = DateTime.Now.ToString("dd/MM/yyyy");

Pegar data e hora atuais:
DateTime data = DateTime.Now;

Transformar string (dt1) em data:
DateTime data1 = DateTime.ParseExact(dt1, "dd/MM/yyyy", null);

Fazer calculo com datas:
TimeSpan diferenca = data2 - data1;

Passar dias como inteiro:
int dias = (int)diferenca.TotalDays;

=================================================================================
Variáveis

As regras gerais para nomear variáveis ​​são:
- Os nomes podem conter letras, dígitos e o caractere sublinhado (_)
- Os nomes devem começar com uma letra
- Os nomes devem começar com letra minúscula e não podem conter espaços em branco
- Os nomes diferenciam maiúsculas de minúsculas ("myVar" e "myvar" são variáveis ​​diferentes)
- Palavras reservadas (como palavras-chave C#, como intou double) não podem ser usadas como nomes

int num; -> definir variável 
string nome = "Fabrício"; -> definir váriavel com um valor

num = int.Parse(Console.ReadLine());
num = Convert.ToInt32(Console.Read());
num = (int)Console.Read();
    -> Atribui valor a variável num digitado pelo usuário

int maior = int.MinValue; -> Menor valor inteiro possível
int menor = int.MaxValue; -> Maior valor inteiro possível

=================================================================================
Constantes

	Constantes são valores que não se alteram ao decorrer do código. É útil para definir valores permanentes, um exemplo de constante é PI (3.1415)

const int pi = 3.1415;

=================================================================================
- Operadores Aritméticos
+	Adição
-	Subtração
*	Multiplicação
/	Divisão
%	Módulo
++	Incremento
-- 	Decremento

- Operadores Relacionais
==	Igual a
!=	Diferente de
>	Maior que
<	Menor que
>=	Maior ou igual a
<=	Menor ou igual a

- Operadores Lógicos
!	Not	Não
||	Or	Ou
&&	And	E

- Operadores de Atribuição
=	+=	-=	*=	/=	%=
&=	|=	^=	>>=	<<=

=================================================================================
Math C#

Math.Max(x, y); -> Retorna o maior valor
Math.Min(x, y); -> Retorna o menor valor
Math.Sqrt(x); -> Retorna Raiz Quadrada
Math.Abs(x); -> Retorna o valor absoluto (positivo)
Math.Round(x); -> Arredonda um número para inteiro

=================================================================================
Temporizador

Fazer o programa esperar alguns segundos:
Thread.Sleep(3000);
	> o Thread.Sleep funciona com milissegundos, ou seja, colocando o valor 3000, ele espera 3 segundos.

=================================================================================
Formatação

("O nome é " + nome) -> Concatenar com variáveis
($"O nome é {nome}") -> Console.Write() com variáveis
("O nome é {0}", nome) -> Console.Write() com variáveis
string.Format("O nome é {0}", nome) -> Formatar variáveis

($"{nome, -5}") -> A variável nome ocupará 5 espaços

\n -> Pula linha

txt.ToUpper() -> Transformar em maiúsculo
txt.ToLower() -> Transformar em minúsculo

frase.Replace('a', '4'); -> Trocar todos os 'a' de uma string frase por '4'



	Como vírgulas e barras possuem significado semântico no código, para colocarmos em uma string devemos usar caracteres especiais.

\'	'
\"	"
\\	\

	Outros caracteres são:

\n	Nova linha
\t	Tab
\b	Backspace

=================================================================================
Condicionais

	C# tem as seguintes declarações condicionais:
- Use if para especificar um bloco de código a ser executado, se uma condição especificada for verdadeira
- Use else para especificar um bloco de código a ser executado, se a mesma condição for falsa
- Use else if para especificar uma nova condição para testar, se a primeira condição for falsa
- Use switch para especificar muitos blocos alternativos de código a serem executados



if (Teste Lógico) {
   // Bloco
} 
else {
   // Bloco
}



if (Teste Lógico) {
   // Bloco
} else if (Teste Lógico) {
   // Bloco 
} else {
   // Bloco
}



ShortHand id else:
variable = (condition) ? expressionTrue :  expressionFalse;



switch (variável){
   case 1:
      // Bloco
      break;
   case 2:
      // Bloco
      break;
   default:
      // Bloco
      break;
}

=================================================================================
Repetições

while (Teste Lógico) 
{
   // Bloco
}



do
{
   // Bloco
}
while (Teste Lógico);



for (inicio; teste lógico; incremento)
{
   // Bloco
}



O foreach é usado para percorrer elementos de um array ou matriz

foreach (x in array) 
{
   // Bloco
}

	Ao usar o break em um laço, o laço será parado imediatamente.
	O comando continue irá parar todas as interações da condicional de um loop, e passará para a próxima repetição.

=================================================================================
Arrays

int[] vetor = {1, 5, 3, 8, 2}; -> Criar array
int[] vetor = new int[5]; -> Criar array já criando as posições que ele terá

vetor.Lenght -> Tamanho do array

Array.IndexOf(vetor, "Texto") -> Buscar valor "Texto" dentro do array vetor, retorna a posição que está no array ou -1 se não estiver

string[] listaFrase = frase.Split(" "); -> Transformar String em um Array

Array.Sort(listaFrase); -> Ordenar um Array

Array.Reverse(listaFrase); -> Inverter um Array

string fraseInversa = string.Join(" ", listaFrase); -> Transformar Array em String

Sortear valor de um Array:
Random sorteio = new Random();
string VAR = ARRAY[sorteio.Next(ARRAYLenght)];

=================================================================================
Listas

Criar uma Lista:
List<int> numeros = new List<int>();

Criar Lista já com valores:
List<int> numeros = new List<int>() {10, 20, 30, 40, 50};

Adicionando valores a Lista:
numeros.Add(1);

Remover um item da Lista:
numeros.Remove(40);

Limpar a Lista e deixá-la vazia:
numeros.Clear();

Saber quantos itens tem na Lista:
numeros.Count

Ordenar uma Lista:
numeros.Sort();

Retornar maior e menor valor da lista:
numeros.Max();
numeros.Min();

Somar todos os valores:
numeros.Sum();

=================================================================================
Matriz

Criar Matriz 3x4 vazia:
int[,] matrix = new int[3, 4];



	Você também pode usar um loop for . Para arrays multidimensionais, você precisa de um loop para cada uma das dimensões do array.
	Observe também que temos que usar GetLength()em vez de Length para especificar quantas vezes o loop deve ser executado:

int[,] numbers = { {1, 4, 2}, {3, 6, 8} };

for (int i = 0; i < numbers.GetLength(0); i++) 
{ 
  for (int j = 0; j < numbers.GetLength(1); j++) 
  { 
    Console.WriteLine(numbers[i, j]); 
  } 
}  

=================================================================================
Try e Catch

	O try é um tratamento de erros, ele irá tentar fazer algo, caso ele não consiga executar, ira cair dentro do catch. Além disso podemos passar o erro para uma variável e exibir a mensagem desse 

try
{
   // Bloco
}
catch (Exception ERROR)
{
   Console.WriteLine(ERROR.Message);
}

	No catch(), o Exception é usado para erros internos, para erros externos usa-se IOException.

catch (IOException) {}

	Há também o erro da divisão por zero

catch (DivideByZeroException ERROR) {}

=================================================================================
Métodos

	Como vimos na estrutura do código, temos um static void Main(), onde escrevemos o código principal. Essa estrutura do C# é um método, e podemos criara outros métodos:

static TIPO DE RETORNO  NOME DA FUNÇÃO(parâmetros) {}

	Os tipos de retorno são:

string
int
double
char
bool
void		Para métodos que não retornam valor

	Para usar o método no programa principal, usamos:

NOME DA FUNÇÃO();



	Para passar parâmetros, é necessário definir o tipo da variável:

static int Soma(int x, int y) {}

	Ao atribuir valores as variáveis, podemos usar as chaves para definir qual valor será atribuido para qual variável:

Soma(y = 2, x = 8);

	Também podemos atribuir valores padrões para os parâmetros, para caso não seja passado nenhum:

static int Soma(int x, int y = 0) {}



	Para retornar valores, usamos o return:

static int Soma(int x, int y) 
{
	return x + y;
}



	Outra possibilidade é criar métodos dentro do método Main:

private static int Soma(int x, int y) {}

=================================================================================
Cores

Mudar cor da letra:
Console.ForegroundColor = ConsoleColor.Blue;

Mudar cor do fundo:
Console.BackgroundColor = ConsoleColor.Blue;

	Para deixar todo o fundo dessa cor, é preciso dar um Console.Clear(); antes de mudar a cor.

Resetar valores das cores para o original:
Console.ResetColor();

Sortear cor de um Array tipo String:
Console.ForegroundColor = (ConsoleColor)Enum.Parse(typeof(ConsoleColor), cores[random.Next(0, cores.Length)]);

- Cores do C#
Black
Blue
Cyan
Gray
Green 
Magenta
Red
White
Yellow
DarkBlue
DarkCyan
DarkGray
DarkGreen
DarkMagenta
DarkRed
DarkYellow

=================================================================================
Classes e Objetos

Criar uma Classe:
class Carro {}

Criar um Objeto:
Carro Opala = new Carro();

	As Classes possuem variáveis padrões, que serão atribuídas a todos os Objetos, porém, o valor de cada variável poderá mudar de Objeto para Objeto:

class Carro
{
	string cor;
	int velocidadeMax;

	Carro Opala = new Carro();
	Opala.cor = "metálico azul";
	Opala.velocidadeMax = 200;
}

=================================================================================
Números Aleatórios

Para escolher um número aleatório de 1 até 100:
Random random = new Random();
int numero = random.Next(1, 101);

=================================================================================
Sons

Botão direito no projeto
Gerenciar pacotes do NuGet
Ir em procurar
Instalar System.Windows.Extensions

Importar biblioteca instalada:
using System.Media;

Configurar som:
SoundPlayer som = new SoundPlayer();
som.SoundLocation = "powerup.wav";

Tocar som:
som.Play();

=================================================================================
Trabalhar com Arquivos

	Para isso vamos usar a System.IO para trabalhar com arquivos

using System.IO;
File.MÉTODO();



Métodos do System.IO:

Adicionar texto ao fim do arquivo existente:
AppendText()

Copiar arquivo:
Copy()

Criar ou substituir arquivo:
Create()

Deleta arquivo:
Delete()

Testa se o arquivo existe:
Exists()

Lê o arquivo:
ReadAllText()

Substitui conteúdo do arquivo:
Replace()

Cria um novo arquivo e grava o conteúdo nele. Se o arquivo já existir, ele será substituído:
WriteAllText()

=================================================================================
Ler arquivo de Texto com C#

	Primerio precisamos importar a Biblioteca StreamReader para ler um arquivo  de texto. Depois criar uma variável sr com o new StreamReader e depois o caminho do arquivo.

StreamReader sr = new StreamReader("arquivo.txt");
while (sr.EndOfStream != true)
{
	Console.WriteLine(sr.ReadLine());
}
sr.Close();



	Se o caminho não for especificado, ele seguirá o caminho fonte do arquivo .exe do programa, que no caso é:

C:\Users\"USUÁRIO ATUAL"\source\repos\"NOME DO PROJETO"\"NOME DO PROJETO"\bin\Debug\net6.0 



	Outro método de ler um arquivo é usando:

string[] linhas = File.ReadAllLines("arquivo.txt");
foreach (string linha in linhas)
{
Console.WriteLine(linha);
}



	Para escrever em um arquivo .txt usamos:

StreamWriter sw = new StreamWriter(CAMINHO DO ARQUIVO TXT, true);
sw.WriteLine("Coisas escritas");
sw.Close();

=================================================================================
Visual no Console

Largura da tela:
int x = Console.WindowWidth;

Altura da tela:
int y = Console.WindowHeight;

Setar posição do cursor:
Console.SetCursorPosition(x, y);



Identificar tecla pressionada e executar uma ação:
if (Console.KeyAvailable)
{
    ConsoleKeyInfo key = Console.ReadKey(true);
    switch (key.Key)
    {
        case ConsoleKey.LeftArrow:
        x--;
        break;

        case ConsoleKey.RightArrow:
        x++;
        break;

        case ConsoleKey.UpArrow:
        y--;
        break;

        case ConsoleKey.Do14:49 28/04/2023wnArrow:
        y++;
        break;
    }
}

=================================================================================
Region

Um region serve para organizar menor o seu código, podendo ocultar um region quando necessário

Abrir region:
#region "Nome da region"

Fechar region:
#endregion






















